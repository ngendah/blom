add_subdirectory(distribute)

add_library(
  logging
  STATIC
  logging_default.cc
)
target_include_directories(logging PRIVATE ${absl_SOURCE_DIR})
target_link_libraries(
  logging
  PRIVATE
  absl::flags
  absl::flags_commandlineflag
  absl::flags_parse
  absl::flags_usage
  absl::strings
)

add_library(
  adaptive_work
  STATIC
  adaptive_work.cc
)
target_include_directories(adaptive_work PRIVATE ${absl_SOURCE_DIR})
target_link_libraries(
  adaptive_work
  PRIVATE
  absl::flags
  absl::flags_commandlineflag
  absl::flags_parse
  absl::flags_usage
  absl::status
  absl::strings
  absl::synchronization
  absl::time
)

add_library(
  status_macros
  STATIC
  status_macros.h
  status_macros_default.h
)
target_include_directories(status_macros PRIVATE ${absl_SOURCE_DIR})
target_link_libraries(
  status_macros
  PRIVATE
  absl::status
  absl::statusor
)

add_library(
  regex
  STATIC
  regex.cc
)
target_include_directories(regex PRIVATE ${absl_SOURCE_DIR})
target_link_libraries(
  regex
  PRIVATE
  absl::strings
)

add_library(
  protobuf
  STATIC
  protobuf.cc
)
target_include_directories(
  protobuf
  PRIVATE
  ${absl_SOURCE_DIR}
  ${protobuf_SOURCE_DIR}/src
)
target_link_libraries(
  protobuf
  PRIVATE
  logging
  absl::status
  absl::statusor
  absl::strings
  protobuf::libprotoc
)

add_library(
  bytestream
  STATIC
  bytestream.cc
)
target_include_directories(
  bytestream
  PRIVATE
  ${absl_SOURCE_DIR}
)
target_link_libraries(
  bytestream
  PRIVATE
  absl::status
  absl::statusor
  absl::strings
)

add_library(
  filesystem
  STATIC
  filesystem_default.cc
  filesystem.cc
)
target_include_directories(
  filesystem
  PRIVATE
  ${absl_SOURCE_DIR}
  ${protobuf_SOURCE_DIR}/src
)
target_link_libraries(
  filesystem
  PRIVATE
  bytestream
  absl::strings
  absl::random_distributions
  absl::random_seed_sequences
  absl::random_internal_randen
  protobuf::libprotoc
)
if(NOT ${ANDROID_PLATFORM})
  target_link_libraries(
    filesystem
    PRIVATE
    stdc++fs
  )
endif()

add_library(
  sharded_io
  STATIC
  sharded_io.cc
)
target_include_directories(
  sharded_io
  PRIVATE
  ${absl_SOURCE_DIR}
  ${protobuf_SOURCE_DIR}/src
)
target_link_libraries(
  sharded_io
  PRIVATE
  utils_proto
  logging
  filesystem
  absl::strings
  absl::status
  absl::statusor
  absl::string_view
  protobuf::libprotoc
)

add_library(
  registration
  STATIC
  registration.cc
)
target_include_directories(
  registration
  PRIVATE
  ${absl_SOURCE_DIR}
)
target_link_libraries(
  registration
  PRIVATE
  absl::status
  absl::statusor
  absl::memory
)

add_library(
  concurrency
  STATIC
  concurrency.cc
  concurrency_default.cc
)
target_include_directories(
  concurrency
  PRIVATE
  ${absl_SOURCE_DIR}
)
target_link_libraries(
  concurrency
  PRIVATE
  logging
)

add_library(
  html
  STATIC
  html.cc
)
target_include_directories(
  html
  PRIVATE
  ${absl_SOURCE_DIR}
)
target_link_libraries(
  html
  PRIVATE
  absl::strings
)

add_library(
  distribution
  STATIC
  distribution.cc
)
target_include_directories(
  distribution
  PRIVATE
  ${absl_SOURCE_DIR}
  ${protobuf_SOURCE_DIR}/src
  ${farmhash_SOURCE_DIR}/src
  ${PROTOC_GENERATED_SOURCE_DIR}
)
target_link_libraries(
  distribution
  PRIVATE
  utils_proto
  logging
  html
  absl::strings
  absl::cord
  absl::string_view
  protobuf::libprotoc
  farmhash::farmhash
)

add_library(
  plot
  STATIC
  plot.cc
)
target_include_directories(
  plot
  PRIVATE
  ${absl_SOURCE_DIR}
  ${protobuf_SOURCE_DIR}/src
  ${farmhash_SOURCE_DIR}/src
)
target_link_libraries(
  plot
  PRIVATE
  logging
  html
  absl::strings
  absl::cord
  absl::string_view
  farmhash::farmhash
)

add_library(
  csv
  STATIC
  csv.cc
)
target_include_directories(csv PRIVATE ${absl_SOURCE_DIR})
target_link_libraries(
  csv
  PRIVATE
  filesystem
  absl::strings
)

add_library(
  hyper_parameters
  STATIC
  hyper_parameters.cc
)
target_include_directories(
  hyper_parameters
  PRIVATE
  ${absl_SOURCE_DIR}
  ${protobuf_SOURCE_DIR}/src
  ${PROTOC_GENERATED_SOURCE_DIR}
)
target_link_libraries(
  hyper_parameters
  PRIVATE
  learner_proto
  absl::strings
  absl::status
  absl::statusor
  protobuf::libprotoc
)

add_library(
  fold_generator
  STATIC
  fold_generator.cc
)
target_include_directories(
  fold_generator
  PRIVATE
  ${absl_SOURCE_DIR}
  ${farmhash_SOURCE_DIR}/src
  ${PROTOC_GENERATED_SOURCE_DIR}
)
target_link_libraries(
  fold_generator
  PRIVATE
  dataset_proto
  data_spec
  vertical_dataset
  csv
  filesystem
  status_macros
  logging
  absl::strings
  protobuf::libprotoc
  farmhash::farmhash
)


# Testing artifact

file(GLOB test_SRC_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *test.cc)
add_library(
  utils_tests_obj
  OBJECT
  ${test_SRC_FILES}
)
target_include_directories(
  utils_tests_obj
  PRIVATE
  ${absl_SOURCE_DIR}
  ${googletest_SOURCE_DIR}
  ${protobuf_SOURCE_DIR}/src
  ${farmhash_SOURCE_DIR}/src
  ${PROTOC_GENERATED_SOURCE_DIR}
)
target_link_libraries(
  utils_tests_obj
  PRIVATE
# other project objects
  utils_proto
  dataset_proto
  learner_proto
  data_spec_inference
# this objects
  logging
  adaptive_work
  status_macros
  regex
  protobuf
  bytestream
  filesystem
  sharded_io
  registration
  concurrency
  html
  distribution
  plot
  fold_generator
  hyper_parameters
# third_party objects
  absl::statusor
  protobuf::libprotoc
  GTest::gtest_main GTest::gmock_main
)

